{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"5250e566-ab85-5d10-9ca3-0550b08135f6","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar theme = themes.notes;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    title: \"Ode to Code Readability\",\n    mdxType: \"Head\"\n  }), mdx(\"h1\", null, \"Ode to Code Readability\"), mdx(\"h4\", null, \"UI Meetup - 14h Jun 2021\"), mdx(\"h6\", null, \"By Phani Rahul Sivalenka \", mdx(\"a\", {\n    parentName: \"h6\",\n    \"href\": \"https://twitter.com/rahulsivalenka\"\n  }, \"@rahulsivalenka\")), mdx(\"hr\", null), mdx(\"div\", {\n    className: \"basic-text-slide\"\n  }, mdx(\"p\", null, \"\\u201CAny fool can write code that a computer can understand. Good programmers write code that humans can understand.\\u201D\"), mdx(\"p\", null, \"\\u2014 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://martinfowler.com/\"\n  }, \"Martin Fowler\"))), mdx(\"hr\", null), mdx(\"div\", {\n    className: \"basic-text-slide\"\n  }, mdx(\"p\", null, \"Readability can be considered as the ability of allowing the code to be easily, quickly and clearly understandable by someone new or someone that hasn\\u2019t seen it for a while.\")), mdx(\"hr\", null), mdx(\"p\", null, \"Code with poor readability is\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"difficult to understand\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"longer to debug\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"hard to maintain\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tricky to extend\")), mdx(\"hr\", null), mdx(\"p\", null, \"Let's have a look at some examples and try to improve their readability.\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"Example 1\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"1\\\"\": true\n  }, \"function getFieldDisplayValue(fieldValue) {\\n  return fieldValue\\n          ? fieldValue?.value\\n            ? fieldValue.value?.length\\n              ? fieldValue.value?.toString().trim()\\n              : EMPTY_DATA_STRING\\n            : fieldValue?.toString().trim()\\n          : EMPTY_DATA_STRING;\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"Example 1\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"1\\\"\": true\n  }, \"function getFieldDisplayValue(fieldValue) {\\n  return fieldValue\\n          ? fieldValue?.value\\n            ? fieldValue.value?.length\\n              ? fieldValue.value?.toString().trim()\\n              : EMPTY_DATA_STRING\\n            : fieldValue?.toString().trim()\\n          : EMPTY_DATA_STRING;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"By refactoring\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"By\",\n    \"refactoring\\\"\": true\n  }, \"function getFieldDisplayValue(fieldValue) {\\n  // note the == which checks for both null and undefined\\n  if (fieldValue == null || fieldValue === '') {\\n    return EMPTY_DATA_STRING;\\n  }\\n\\n  const trimmedValue = (fieldValue.value ?? fieldValue).toString().trim();\\n  return trimmedValue === '' ? EMPTY_DATA_STRING : trimmedValue;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers title=\\\"Example 1\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"1\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"By refactoring further\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"By\",\n    \"refactoring\": true,\n    \"further\\\"\": true\n  }, \"function getFieldDisplayValue(fieldValue) {\\n  const trimmedValue = (fieldValue?.value ?? fieldValue)?.toString().trim();\\n\\n  // note the == which checks for both null and undefined\\n  return trimmedValue == null || trimmedValue === ''\\n    ? EMPTY_DATA_STRING\\n    : trimmedValue;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers title=\\\"Example 1\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"1\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title=\\\"Example 2\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"2\\\"\": true\n  }, \"const ViewToolbar = ({\\n  onRefresh,\\n  lastUpdatedTime,\\n  actionContent,\\n  filterContent,\\n  onFilterApply,\\n  resetFilters,\\n  hasFilters,\\n  filterOpen,\\n  onFilterOpen,\\n  onFilterClose,\\n  leftContent,\\n}) => {\\n  // ...\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers title=\\\"Example 2\\\" subtitle=\\\"Can you see if 'onFilterOpened' prop exists here?\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"2\\\"\": true,\n    \"subtitle\": \"\\\"Can\",\n    \"you\": true,\n    \"see\": true,\n    \"if\": true,\n    \"'onFilterOpened'\": true,\n    \"prop\": true,\n    \"exists\": true,\n    \"here?\\\"\": true\n  }, \"\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title=\\\"Example 2\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"2\\\"\": true\n  }, \"const ViewToolbar = ({\\n  onRefresh,\\n  lastUpdatedTime,\\n  actionContent,\\n  filterContent,\\n  onFilterApply,\\n  resetFilters,\\n  hasFilters,\\n  filterOpen,\\n  onFilterOpen,\\n  onFilterClose,\\n  leftContent,\\n}) => {\\n  // ...\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title=\\\"By alpha sorting\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"By\",\n    \"alpha\": true,\n    \"sorting\\\"\": true\n  }, \"const ViewToolbar = ({\\n  actionContent,\\n  filterContent,\\n  filterOpen,\\n  hasFilters,\\n  lastUpdatedTime,\\n  leftContent,\\n  onRefresh,\\n  onFilterApply,\\n  onFilterClose,\\n  onFilterOpen,\\n  resetFilters,\\n}) => {\\n  // ...\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"Example 3\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"3\\\"\": true\n  }, \"const output = {\\n  field: formField.field,\\n  fieldLabel: formField.display_name,\\n  value:\\n    values[formField.field]?.value !== undefined\\n      ? values[formField.field].value?.toString().trim()\\n      : values[formField.field]?.toString().trim(),\\n  create_date: values[formField.field]?.create_date\\n    ? values[formField.field].create_date\\n    : null,\\n  expiry_date: values[formField.field]?.expiry_date\\n    ? values[formField.field].expiry_date\\n    : null,\\n  description: values[formField.field]?.description\\n    ? values[formField.field].description\\n    : '',\\n  old_value: values[formField.field]?.old_value\\n    ? values[formField.field].old_value\\n    : '',\\n  isDropdown: formField.component_type === 'dropdown',\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"Example 3\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"3\\\"\": true\n  }, \"const output = {\\n  field: formField.field,\\n  fieldLabel: formField.display_name,\\n  value:\\n    values[formField.field]?.value !== undefined\\n      ? values[formField.field].value?.toString().trim()\\n      : values[formField.field]?.toString().trim(),\\n  create_date: values[formField.field]?.create_date\\n    ? values[formField.field].create_date\\n    : null,\\n  expiry_date: values[formField.field]?.expiry_date\\n    ? values[formField.field].expiry_date\\n    : null,\\n  description: values[formField.field]?.description\\n    ? values[formField.field].description\\n    : '',\\n  old_value: values[formField.field]?.old_value\\n    ? values[formField.field].old_value\\n    : '',\\n  isDropdown: formField.component_type === 'dropdown',\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"By DRYing\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"By\",\n    \"DRYing\\\"\": true\n  }, \"// Using object destructuring\\nconst { component_type, display_name, field } = formField;\\nconst fieldValue = values[field];\\n\\nconst output = {\\n  // Using object shorthand\\n  field,\\n  fieldLabel: display_name,\\n  value:\\n    fieldValue?.value !== undefined\\n      ? fieldValue.value?.toString().trim()\\n      : fieldValue?.toString().trim(),\\n  create_date: fieldValue?.create_date\\n    ? fieldValue.create_date\\n    : null,\\n  expiry_date: fieldValue?.expiry_date\\n    ? fieldValue.expiry_date\\n    : null,\\n  description: fieldValue?.description\\n    ? fieldValue.description\\n    : '',\\n  old_value: fieldValue?.old_value\\n    ? fieldValue.old_value\\n    : '',\\n  isDropdown: component_type === 'dropdown',\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers title=\\\"Example 3\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"3\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"By refactoring\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"By\",\n    \"refactoring\\\"\": true\n  }, \"// Using object destructuring\\nconst { component_type, display_name, field } = formField;\\nconst fieldValue = values[field];\\n\\nconst output = {\\n  // Using object shorthand\\n  field,\\n  fieldLabel: display_name,\\n  // Using new operators such as null coalescing (??) and optional chaining (?.)\\n  value: (fieldValue?.value ?? fieldValue)?.toString().trim(),\\n  create_date: fieldValue?.create_date ?? null,\\n  expiry_date: fieldValue?.expiry_date ?? null,\\n  description: fieldValue?.description ?? null,\\n  old_value: fieldValue?.old_value ?? '',\\n  isDropdown: component_type === 'dropdown',\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers title=\\\"Example 3\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"3\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"By DRYing it again\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"By\",\n    \"DRYing\": true,\n    \"it\": true,\n    \"again\\\"\": true\n  }, \"// Using object destructuring\\nconst { component_type, display_name, field } = formField;\\nconst fieldValue = values[field];\\n\\n// Using object destructuring with default values\\nconst { \\n  create_date = null,\\n  description = '',\\n  expiry_date = null,\\n  old_value = '',\\n  value\\n} = (fieldValue ?? {});\\n\\nconst output = {\\n  // Using object shorthand\\n  field,\\n  fieldLabel: display_name,\\n  // Using new operators such as null coalescing (??) and optional chaining (?.)\\n  value: (value ?? fieldValue)?.toString().trim(),\\n  create_date,\\n  expiry_date,\\n  description,\\n  old_value,\\n  isDropdown: component_type === 'dropdown',\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers title=\\\"Example 3\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"3\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"By alpha sorting\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"By\",\n    \"alpha\": true,\n    \"sorting\\\"\": true\n  }, \"// Using object destructuring\\nconst { component_type, display_name, field } = formField;\\nconst fieldValue = values[field];\\n\\n// Using object destructuring with default values\\nconst { \\n  create_date = null,\\n  description = '',\\n  expiry_date = null,\\n  old_value = '',\\n  value\\n} = (fieldValue ?? {});\\n\\nconst output = {\\n  // Using object shorthand\\n  create_date,\\n  description,\\n  expiry_date,\\n  field,\\n  fieldLabel: display_name,\\n  isDropdown: component_type === 'dropdown',\\n  old_value,\\n  // Using new operators such as null coalescing (??) and optional chaining (?.)\\n  value: (value ?? fieldValue)?.toString().trim(),\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers title=\\\"Example 3\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"3\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"Example 4\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"4\\\"\": true\n  }, \"Object.entries(this.state.configuration).map((entry, index) => {\\n  if (keys.includes(entry[0])) {\\n    if (entry[0] === 'no_of_CPUs') {\\n      if (parseInt(entry[1]) % 2 !== 0 && parseInt(entry[1]) > 1) {\\n        error[entry[0]] = 'Select an even number.';\\n        error_counts++;\\n      }\\n    }\\n    if (entry[0] === 'memory') {\\n      if (parseFloat(entry[1]) % 0.25 !== 0) {\\n        error[entry[0]] = 'Value must be in increments of 0.25';\\n        error_counts++;\\n      }\\n    }\\n  }\\n});\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"Example 4\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"4\\\"\": true\n  }, \"Object.entries(this.state.configuration).map((entry, index) => {\\n  if (keys.includes(entry[0])) {\\n    if (entry[0] === 'no_of_CPUs') {\\n      if (parseInt(entry[1]) % 2 !== 0 && parseInt(entry[1]) > 1) {\\n        error[entry[0]] = 'Select an even number.';\\n        error_counts++;\\n      }\\n    }\\n    if (entry[0] === 'memory') {\\n      if (parseFloat(entry[1]) % 0.25 !== 0) {\\n        error[entry[0]] = 'Value must be in increments of 0.25';\\n        error_counts++;\\n      }\\n    }\\n  }\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"By avoiding deep nesting\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"By\",\n    \"avoiding\": true,\n    \"deep\": true,\n    \"nesting\\\"\": true\n  }, \"Object.entries(this.state.configuration).map((entry, index) => {\\n  // early return\\n  if (!keys.includes(entry[0])) {\\n    return;\\n  }\\n\\n  // combining conditions with logical operators such as && or ||\\n  if (entry[0] === 'no_of_CPUs' && parseInt(entry[1]) % 2 !== 0 && parseInt(entry[1]) > 1\\n    error[entry[0]] = 'Select an even number.';\\n    error_counts++;\\n  }\\n\\n  if (entry[0] === 'memory' && parseFloat(entry[1]) % 0.25 !== 0) {\\n    error[entry[0]] = 'Value must be in increments of 0.25';\\n    error_counts++;\\n  }\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers title=\\\"Example 4\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"4\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"By naming properly\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"By\",\n    \"naming\": true,\n    \"properly\\\"\": true\n  }, \"Object.entries(this.state.configuration).map(([key, value], index) => {\\n  // early return\\n  if (!keys.includes(key)) {\\n    return;\\n  }\\n\\n  // combining conditions with logical operators such as && or ||\\n  if (key === 'no_of_CPUs' && parseInt(value) % 2 !== 0 && parseInt(value) > 1\\n    error[key] = 'Select an even number.';\\n    error_counts++;\\n  }\\n\\n  if (key === 'memory' && parseFloat(value) % 0.25 !== 0) {\\n    error[key] = 'Value must be in increments of 0.25';\\n    error_counts++;\\n  }\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers title=\\\"Example 4\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"4\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"By DRYing\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"By\",\n    \"DRYing\\\"\": true\n  }, \"Object.entries(this.state.configuration).map(([key, value], index) => {\\n  // early return\\n  if (!keys.includes(key)) {\\n    return;\\n  }\\n\\n  const parsedIntValue = parseInt(value);\\n  // combining conditions with logical operators such as && or ||\\n  if (key === 'no_of_CPUs' && parsedIntValue % 2 !== 0 && parsedIntValue > 1\\n    error[key] = 'Select an even number.';\\n    error_counts++;\\n  }\\n\\n  if (key === 'memory' && parseFloat(value) % 0.25 !== 0) {\\n    error[key] = 'Value must be in increments of 0.25';\\n    error_counts++;\\n  }\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers title=\\\"Example 4\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"4\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }, \"\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"Example 5\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"5\\\"\": true\n  }, \"const DataPreview = () => {\\n  const [loading, setLoading] = React.useState(false);\\n  const [open,setOpen] = React.useState(false);\\n  const [data, setData] = React.useState([]);\\n  const [error, setError] = React.useState(null);\\n  const [detailsItemId, setDetailsItemId] = React.useState(null);\\n  const showDialog = () => setOpen(true);\\n  const hideDialog = () => setOpen(false);\\n  React.useEffect(() => {\\n    async(() => {\\n      try {\\n        setLoading(true);\\n        const { data } = await makeApiCall();\\n        setData(data);\\n        setError(null);\\n        setLoading(false);\\n      } catch(err) {\\n        setError(err.message);\\n        setData([]);\\n        setLoading(false);\\n      }\\n    })();\\n  }, []);\\n  const handleOnItemShowDetails = (id) => {\\n    setDetailsItemId(id);\\n    showDialog();\\n  }\\n  return !loading ? (\\n    <div>\\n      {Boolean(error)\\n        ? <DataError message={error} /> \\n        : <DataList data={data} onItemShowDetails={handleOnItemShowDetails} />\\n      }\\n      <ItemDetailDialog itemId={detailsItemId} onClose={hideDialog} open={open} />\\n    </div>\\n  ) : <Loader />;\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"Example 5\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"5\\\"\": true\n  }, \"const DataPreview = () => {\\n  const [loading, setLoading] = React.useState(false);\\n  const [open,setOpen] = React.useState(false);\\n  const [data, setData] = React.useState([]);\\n  const [error, setError] = React.useState(null);\\n  const [detailsItemId, setDetailsItemId] = React.useState(null);\\n  const showDialog = () => setOpen(true);\\n  const hideDialog = () => setOpen(false);\\n  React.useEffect(() => {\\n    async(() => {\\n      try {\\n        setLoading(true);\\n        const { data } = await makeApiCall();\\n        setData(data);\\n        setError(null);\\n        setLoading(false);\\n      } catch(err) {\\n        setError(err.message);\\n        setData([]);\\n        setLoading(false);\\n      }\\n    })();\\n  }, []);\\n  const handleOnItemShowDetails = (id) => {\\n    setDetailsItemId(id);\\n    showDialog();\\n  }\\n  return !loading ? (\\n    <div>\\n      {Boolean(error)\\n        ? <DataError message={error} /> \\n        : <DataList data={data} onItemShowDetails={handleOnItemShowDetails} />\\n      }\\n      <ItemDetailDialog itemId={detailsItemId} onClose={hideDialog} open={open} />\\n    </div>\\n  ) : <Loader />;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"By spacing\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"By\",\n    \"spacing\\\"\": true\n  }, \"const DataPreview = () => {\\n  const [loading, setLoading] = React.useState(false);\\n  const [open,setOpen] = React.useState(false);\\n  const [data, setData] = React.useState([]);\\n  const [error, setError] = React.useState(null);\\n  const [detailsItemId, setDetailsItemId] = React.useState(null);\\n\\n  const showDialog = () => setOpen(true);\\n  const hideDialog = () => setOpen(false);\\n  \\n  React.useEffect(() => {\\n    async(() => {\\n      try {\\n        setLoading(true);\\n        const { data } = await makeApiCall();\\n        setData(data);\\n        setError(null);\\n        setLoading(false);\\n      } catch(err) {\\n        setError(err.message);\\n        setData([]);\\n        setLoading(false);\\n      }\\n    })();\\n  }, []);\\n  \\n  const handleOnItemShowDetails = (id) => {\\n    setDetailsItemId(id);\\n    showDialog();\\n  }\\n  \\n  return !loading ? (\\n    <div>\\n      {Boolean(error)\\n        ? <DataError message={error} /> \\n        : <DataList data={data} onItemShowDetails={handleOnItemShowDetails} />\\n      }\\n  \\n      <ItemDetailDialog itemId={detailsItemId} onClose={hideDialog} open={open} />\\n    </div>\\n  ) : <Loader />;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers title=\\\"Example 5\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"5\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 1:41 title=\\\"By logically grouping code blocks\\\"\",\n    \"showNumbers\": true,\n    \"1:41\": true,\n    \"title\": \"\\\"By\",\n    \"logically\": true,\n    \"grouping\": true,\n    \"code\": true,\n    \"blocks\\\"\": true\n  }, \"const DataPreview = () => {\\n  const [loading, setLoading] = React.useState(false);\\n  const [data, setData] = React.useState([]);\\n  const [error, setError] = React.useState(null);\\n  React.useEffect(() => {\\n    async(() => {\\n      try {\\n        setLoading(true);\\n        const { data } = await makeApiCall();\\n        setData(data);\\n        setError(null);\\n        setLoading(false);\\n      } catch(err) {\\n        setError(err.message);\\n        setData([]);\\n        setLoading(false);\\n      }\\n    })();\\n  }, []);\\n  \\n  const [open,setOpen] = React.useState(false);\\n  const showDialog = () => setOpen(true);\\n  const hideDialog = () => setOpen(false);\\n  \\n  const [detailsItemId, setDetailsItemId] = React.useState(null);\\n  const handleOnItemShowDetails = (id) => {\\n    setDetailsItemId(id);\\n    showDialog();\\n  }\\n  \\n  return !loading ? (\\n    <div>\\n      {Boolean(error)\\n        ? <DataError message={error} /> \\n        : <DataList data={data} onItemShowDetails={handleOnItemShowDetails} />\\n      }\\n  \\n      <ItemDetailDialog itemId={detailsItemId} onClose={hideDialog} open={open} />\\n    </div>\\n  ) : <Loader />;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers title=\\\"Example 5\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"5\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"BONUS: Opportunity for extracting reusable logic\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"BONUS:\",\n    \"Opportunity\": true,\n    \"for\": true,\n    \"extracting\": true,\n    \"reusable\": true,\n    \"logic\\\"\": true\n  }, \"function useToggle(initialState = false) {\\n  const [state, setState] = useState(initialState);\\n\\n  const toggle = useCallback(() => setState(state => !state), []);\\n\\n  return [state, toggle]\\n}\\n\\nconst DataPreview = () => {\\n  const [loading, setLoading] = React.useState(false);\\n  const [data, setData] = React.useState([]);\\n  const [error, setError] = React.useState(null);\\n  React.useEffect(() => {\\n    async(() => {\\n      try {\\n        setLoading(true);\\n        const { data } = await makeApiCall();\\n        setData(data);\\n        setError(null);\\n        setLoading(false);\\n      } catch(err) {\\n        setError(err.message);\\n        setData([]);\\n        setLoading(false);\\n      }\\n    })();\\n  }, []);\\n  \\n  const [detailsOpen, toggleDetails] = useToggle();\\n  \\n  const [detailsItemId, setDetailsItemId] = React.useState(null);\\n  const handleOnItemShowDetails = (id) => {\\n    setDetailsItemId(id);\\n    toggleDetails();\\n  }\\n  \\n  return !loading ? (\\n    <div>\\n      {Boolean(error)\\n        ? <DataError message={error} /> \\n        : <DataList data={data} onItemShowDetails={handleOnItemShowDetails} />\\n      }\\n  \\n      <ItemDetailDialog itemId={detailsItemId} onClose={toggleDetails} open={detailsOpen} />\\n    </div>\\n  ) : <Loader />;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers title=\\\"Example 5\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"5\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"By using early return in jsx\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"By\",\n    \"using\": true,\n    \"early\": true,\n    \"return\": true,\n    \"in\": true,\n    \"jsx\\\"\": true\n  }, \"function useToggle(initialState = false) {\\n  const [state, setState] = useState(initialState);\\n\\n  const toggle = useCallback(() => setState(state => !state), []);\\n\\n  return [state, toggle]\\n}\\n\\nconst DataPreview = () => {\\n  const [loading, setLoading] = React.useState(false);\\n  const [data, setData] = React.useState([]);\\n  const [error, setError] = React.useState(null);\\n  React.useEffect(() => {\\n    async(() => {\\n      try {\\n        setLoading(true);\\n        const { data } = await makeApiCall();\\n        setData(data);\\n        setError(null);\\n        setLoading(false);\\n      } catch(err) {\\n        setError(err.message);\\n        setData([]);\\n        setLoading(false);\\n      }\\n    })();\\n  }, []);\\n  \\n  const [detailsOpen, toggleDetails] = useToggle();\\n  \\n  const [detailsItemId, setDetailsItemId] = React.useState(null);\\n  const handleOnItemShowDetails = (id) => {\\n    setDetailsItemId(id);\\n    toggleDetails();\\n  }\\n\\n  if (loading) {\\n    return <Loader />\\n  }\\n  \\n  return (\\n    <div>\\n      {Boolean(error)\\n        ? <DataError message={error} /> \\n        : <DataList data={data} onItemShowDetails={handleOnItemShowDetails} />\\n      }\\n  \\n      <ItemDetailDialog itemId={detailsItemId} onClose={toggleDetails} open={detailsOpen} />\\n    </div>\\n  );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"Example 5\\\"\",\n    \"title\": \"\\\"Example\",\n    \"5\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\"\n  }, \"\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"Example 6\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"6\\\"\": true\n  }, \"const handleExport = async (format) => {\\n  const reqPayload = {\\n    downloadType: format,\\n    fileName: 'Download',\\n    filters: allFilters.filters,\\n    quickFilters: allFilters.quickFilters.length\\n      ? allFilters.quickFilters\\n      : undefined,\\n    sortBy: allFilters.sortModel,\\n  };\\n  let fileName =\\n    'Download_' + getDateByFormat(new Date(), 'MM_dd_yyyy_HH_mm');\\n  const response = await callDownloadApi(reqPayload);\\n  const link = document.createElement('a');\\n  link.href = window.URL.createObjectURL(new Blob([response.data]));\\n  link.setAttribute('download', fileName + exportFormat);\\n  document.body.appendChild(link);\\n  link.click();\\n  link.remove();\\n};\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"Example 6\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"6\\\"\": true\n  }, \"const handleExport = async (format) => {\\n  const reqPayload = {\\n    downloadType: format,\\n    fileName: 'Download',\\n    filters: allFilters.filters,\\n    quickFilters: allFilters.quickFilters.length\\n      ? allFilters.quickFilters\\n      : undefined,\\n    sortBy: allFilters.sortModel,\\n  };\\n  let fileName =\\n    'Download_' + getDateByFormat(new Date(), 'MM_dd_yyyy_HH_mm');\\n  const response = await callDownloadApi(reqPayload);\\n  const link = document.createElement('a');\\n  link.href = window.URL.createObjectURL(new Blob([response.data]));\\n  link.setAttribute('download', fileName + exportFormat);\\n  document.body.appendChild(link);\\n  link.click();\\n  link.remove();\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers title=\\\"By grouping\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"By\",\n    \"grouping\\\"\": true\n  }, \"const handleExport = async (format) => {\\n  const reqPayload = {\\n    downloadType: format,\\n    fileName: 'Download',\\n    filters: allFilters.filters,\\n    quickFilters: allFilters.quickFilters.length\\n      ? allFilters.quickFilters\\n      : undefined,\\n    sortBy: allFilters.sortModel,\\n  };\\n  let fileName =\\n    'Download_' + getDateByFormat(new Date(), 'MM_dd_yyyy_HH_mm');\\n\\n  const response = await callDownloadApi(reqPayload);\\n\\n  const link = document.createElement('a');\\n  link.href = window.URL.createObjectURL(new Blob([response.data]));\\n  link.setAttribute('download', fileName + exportFormat);\\n  document.body.appendChild(link);\\n  link.click();\\n  link.remove();\\n};\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers title=\\\"Example 6\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"6\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"showNumbers 1:33 title=\\\"By splitting\\\"\",\n    \"showNumbers\": true,\n    \"1:33\": true,\n    \"title\": \"\\\"By\",\n    \"splitting\\\"\": true\n  }, \"const getFileName = () => 'Download_' + getDateByFormat(new Date(), 'MM_dd_yyyy_HH_mm');\\n\\nconst getPayload = (format) => ({\\n  downloadType: format,\\n  fileName: getFileName(),\\n  filters: allFilters.filters,\\n  quickFilters: allFilters.quickFilters.length\\n    ? allFilters.quickFilters\\n    : undefined,\\n  sortBy: allFilters.sortModel,\\n});\\n\\nconst downloadFile = ({ arrayBuffer, name, format }) => {\\n  const link = document.createElement('a');\\n  link.href = window.URL.createObjectURL(new Blob([arrayBuffer]));\\n  link.setAttribute('download', name + format);\\n\\n  document.body.appendChild(link);\\n  link.click();\\n\\n  link.remove();\\n}\\n\\nconst handleExport = async (format) => {\\n  const payload = getPayload(format);\\n  const response = await callDownloadApi(payload);\\n  \\n  downloadFile({\\n    arrayBuffer: response.data,\\n    name: payload.fileName,\\n    format,\\n  })\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers title=\\\"Example 6\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"Example\",\n    \"6\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"showNumbers 24:33\",\n    \"showNumbers\": true,\n    \"24:33\": true\n  }, \"\")))), mdx(\"hr\", null), mdx(\"p\", null, \"Thank You\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"5250e566-ab85-5d10-9ca3-0550b08135f6","slug":"/ui-meetup-ode-to-code-readability","title":"Ode to Code Readability"}},"staticQueryHashes":[]}